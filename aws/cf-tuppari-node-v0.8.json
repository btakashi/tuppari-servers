{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "CloudFormation Tuppari Template. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {

    "AccountTable": {
      "Description": "Account table name of DynamoDB",
      "Type": "String",
      "MinLength": "1",
      "ConstraintDescription": " is required."
    },

    "ApplicationTable": {
      "Description": "Application table name of DynamoDB",
      "Type": "String",
      "MinLength": "1",
      "ConstraintDescription": " is required."
    },

    "KeypairTable": {
      "Description": "Keypair table name of DynamoDB",
      "Type": "String",
      "MinLength": "1",
      "ConstraintDescription": " is required."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the application server.",
      "Type": "String"
    },

    "ErrorMailAddress": {
      "Description": "Mail address that is notified when server start and error eccured.",
      "Type": "String",
      "MinLength": "1",
      "ConstraintDescription": " is required."
    }

  },

  "Mappings": {

    "AWSRegionArch2AMI": {
      "us-east-1": {
        "ebs": "ami-e565ba8c",
        "instanceStore": "ami-f565ba9c"
      },
      "us-west-2": {
        "ebs": "ami-3ac64a0a",
        "instanceStore": "ami-30c64a00"
      },
      "us-west-1": {
        "ebs": "ami-e78cd4a2",
        "instanceStore": "ami-d98cd49c"
      },
      "eu-west-1": {
        "ebs": "ami-f9231b8d",
        "instanceStore": "ami-ff231b8b"
      },
      "ap-southeast-1": {
        "ebs": "ami-be3374ec",
        "instanceStore": "ami-b23374e0"
      },
      "ap-northeast-1": {
        "ebs": "ami-e47acbe5",
        "instanceStore": "ami-047bca05"
      },
      "sa-east-1": {
        "ebs": "ami-a6855bbb",
        "instanceStore": "ami-ae855bb3"
      }
    },

    "ServerSettings": {
      "gyoji": {
        "port": 3000,
        "instanceType": "t1.micro",
        "rootDeviceType": "ebs"
      },

      "harite": {
        "port": 80,
        "instanceType": "t1.micro",
        "rootDeviceType": "ebs"
      }
    },

    "Packages": {
      "nodejs": {
        "version": "0.8.6"
      },

      "tuppari": {
        "url": "https://github.com/hakobera/tuppari-servers/zipball/v0.2.1"
      }
    }

  },

  "Resources": {
    "CfnUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:DescribeStackResource",
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action":"dynamodb:*",
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },

    "HostKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "CfnUser"
        }
      }
    },

    "SNSTopic": {
      "Type": "AWS::SNS::Topic"
    },

    "ErrorTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": { "Ref": "ErrorMailAddress" }
          }
        ]
      }
    },

    "SNSPolicy" : {
      "Type" : "AWS::SNS::TopicPolicy",
      "Properties" : {
        "PolicyDocument" :  {
          "Version" : "2008-10-17",
            "Id" : "SNSTopicPolicy",
            "Statement" : [{
              "Sid" : "SNS-statement-id",
              "Effect" : "Allow",
              "Principal" : {
                "AWS" : { "Fn::GetAtt" : [ "CfnUser", "Arn" ] }
              },
              "Action" : [
                "sns:Publish",
                "sns:Subscribe",
                "sns:Receive"
              ],
              "Resource" : "*"
           }]
        },
        "Topics" : [ { "Ref" : "SNSTopic" }, { "Ref" : "ErrorTopic" } ]
      }
    },

    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "GyojiServerElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : { "Fn::FindInMap": [ "ServerSettings", "gyoji", "port" ] },
            "Protocol" : "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Fn::FindInMap": [ "ServerSettings", "gyoji", "port" ] }, "/info"]]},
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "3",
          "Interval" : "15",
          "Timeout" : "10"
        }
      }
    },

    "GyojiServerLaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "gcc-c++": [],
                "make": [],
                "libxml2-devel": []
              }
            },

            "sources" : {
              "/var/opt/tuppari" : { "Fn::FindInMap": [ "Packages", "tuppari", "url" ] },
              "/var/opt/nodejs": { "Fn::Join" : [ "", [ "http://nodejs.org/dist/v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x64.tar.gz"  ]] }
            }
          }
        }
      },
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "ServerSettings", "gyoji", "rootDeviceType" ] } ] },
        "InstanceType": { "Fn::FindInMap": [ "ServerSettings", "gyoji", "instanceType" ] },
        "SecurityGroups": [ { "Ref": "GyojiServerSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref": "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "# Install packages\n",
                "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackName" }, " -r GyojiServerLaunchConfig ",
                "    --access-key ", { "Ref": "HostKeys" },
                "    --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "    --region ", { "Ref": "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                "ulimit -n 65535\n",

                "ln -s /var/opt/nodejs/", "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x86_64/bin/node /usr/bin/node\n",
                "ln -s /var/opt/nodejs/", "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x86_64/bin/npm /usr/bin/npm\n",

                "# Start application\n",
                "cd /var/opt/tuppari/gyoji\n",
                "npm config set gyoji:HOST_NAME `curl http://169.254.169.254/latest/meta-data/public-hostname`", "\n",
                "npm config set gyoji:PORT ", { "Fn::FindInMap": [ "ServerSettings", "gyoji", "port" ] } ,"\n",
                "npm config set gyoji:ACCOUNT_TABLE_NAME ", { "Ref": "AccountTable" } ,"\n",
                "npm config set gyoji:APPLICATION_TABLE_NAME ", { "Ref": "ApplicationTable" } ,"\n",
                "npm config set gyoji:KEYPAIR_TABLE_NAME ", { "Ref": "KeypairTable" } ,"\n",
                "npm config set gyoji:AWS_ACCESS_KEY_ID ",  { "Ref": "HostKeys" } ,"\n",
                "npm config set gyoji:AWS_SECRET_ACCESS_KEY ", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] } ,"\n",
                "npm config set gyoji:AWS_REGION ", { "Ref": "AWS::Region" } ,"\n",
                "npm config set gyoji:SNS_TOPIC_ARN ", { "Ref" : "SNSTopic" }, "\n",
                "npm config set gyoji:ERROR_TOPIC_ARN ", { "Ref" : "ErrorTopic" }, "\n",

                "npm install --production\n",
                "cp /tmp/.npmrc /root\n",

                "NODE_ENV=production npm start > gyoji.log 2>&1 &\n",

                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"GyojiServer setup complete\" '", { "Ref": "WaitHandle" }, "'\n"
              ]]
            }
          }
        }
      }
    },

    "GyojiServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "GyojiServerLaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "4",
        "LoadBalancerNames" : [ { "Ref" : "GyojiServerElasticLoadBalancer" } ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "", [ { "Ref": "AWS::StackName" }, "::GyojiServer" ]] },
            "PropagateAtLaunch" : "true"
          },
          {
            "Key": "AppURL",
            "Value": { "Fn::FindInMap": [ "Packages", "tuppari", "url" ] },
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "GyojiServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": { "Fn::FindInMap": [ "ServerSettings", "gyoji", "port" ] },
            "ToPort": { "Fn::FindInMap": [ "ServerSettings", "gyoji", "port" ] },
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["GyojiServerElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupName" : {"Fn::GetAtt" : ["GyojiServerElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
          }
        ]
      }
    },

    "HariteServerElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : { "Fn::FindInMap": [ "ServerSettings", "harite", "port" ] },
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Fn::FindInMap": [ "ServerSettings", "harite", "port" ] }, "/"]]},
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "3",
          "Interval" : "15",
          "Timeout" : "10"
        }
      }
    },

    "HariteServerLaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "gcc-c++": [],
                "make": [],
                "libxml2-devel": []
              }
            },

            "sources" : {
              "/var/opt/tuppari": { "Fn::FindInMap": [ "Packages", "tuppari", "url" ] },
              "/var/opt/nodejs": { "Fn::Join" : [ "", [ "http://nodejs.org/dist/v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x64.tar.gz"  ]] }
            }
          }
        }
      },
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "ServerSettings", "harite", "rootDeviceType" ] } ] },
        "InstanceType": { "Fn::FindInMap": [ "ServerSettings", "harite", "instanceType" ] },
        "SecurityGroups": [ { "Ref": "HariteServerSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "SpotPrice": "0.1",
        "UserData": {
          "Fn::Base64": {
            "Fn::Base64": {
              "Fn::Join": ["", [
                "#!/bin/bash -v\n",
                "yum update -y aws-cfn-bootstrap\n",

                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref": "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "# Install packages\n",
                "/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackName" }, " -r HariteServerLaunchConfig ",
                "    --access-key ", { "Ref": "HostKeys" },
                "    --secret-key ", { "Fn::GetAtt": ["HostKeys", "SecretAccessKey"] },
                "    --region ", { "Ref": "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

                "ulimit -n 65535\n",

                "ln -s /var/opt/nodejs/", "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x86_64/bin/node /usr/bin/node\n",
                "ln -s /var/opt/nodejs/", "/node-v", { "Fn::FindInMap": [ "Packages", "nodejs", "version" ] }, "-linux-x86_64/bin/npm /usr/bin/npm\n",

                "# Start application\n",
                "cd /var/opt/tuppari/harite\n",
                "npm config set harite:HOST_NAME `curl http://169.254.169.254/latest/meta-data/public-hostname`", "\n",
                "npm config set harite:PORT ", { "Fn::FindInMap": [ "ServerSettings", "harite", "port" ] }, "\n",
                "npm config set harite:AWS_ACCESS_KEY_ID ",  { "Ref": "HostKeys" } ,"\n",
                "npm config set harite:AWS_SECRET_ACCESS_KEY ", { "Fn::GetAtt": [ "HostKeys", "SecretAccessKey" ] } ,"\n",
                "npm config set harite:AWS_REGION ", { "Ref": "AWS::Region" } ,"\n",
                "npm config set harite:SNS_TOPIC_ARN ", { "Ref" : "SNSTopic" }, "\n",
                "npm config set harite:ERROR_TOPIC_ARN ", { "Ref" : "ErrorTopic" }, "\n",

                "npm install --production\n",
                "cp /tmp/.npmrc /root\n",

                "NODE_ENV=production npm start > harite.log 2>&1 &\n",

                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 -r \"HariteServer setup complete\" '", { "Ref": "WaitHandle" }, "'\n"
              ]]
            }
          }
        }
      }
    },

    "HariteServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "HariteServerLaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "16",
        "LoadBalancerNames" : [ { "Ref" : "HariteServerElasticLoadBalancer" } ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "", [ { "Ref": "AWS::StackName" }, "::HariteServer" ]] },
            "PropagateAtLaunch" : "true"
          },
          {
            "Key": "AppURL",
            "Value": { "Fn::FindInMap": [ "Packages", "tuppari", "url" ] },
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "HariteServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "HariteServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "2"
      }
    },

    "HariteServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "HariteServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "HariteServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": { "Fn::FindInMap": [ "ServerSettings", "harite", "port" ] },
            "ToPort": { "Fn::FindInMap": [ "ServerSettings", "harite", "port" ] },
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "HariteServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "HariteServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "2",
        "Threshold": "30",
        "AlarmActions": [ { "Ref": "HariteServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "HariteServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }

  },

  "Outputs": {
    "GyojiServerURL": {
      "Description": "URL of the admin app.",
      "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "GyojiServerElasticLoadBalancer", "DNSName" ]}]]}
    },
    "HariteServerURL": {
      "Description": "URL of the broadcast app",
      "Value": { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "HariteServerElasticLoadBalancer", "DNSName" ]}]]}
    },
    "AppURL": {
      "Description": "URL of the application zip/tarball",
      "Value": { "Fn::FindInMap": [ "Packages", "tuppari", "url" ] }
    },
    "SNSTopic": {
      "Description": "SNS Topic ARN",
      "Value": { "Ref" : "SNSTopic" }
    }
  }

}
